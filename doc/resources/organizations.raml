is: [ auth ]
type:
  collection:
    humanName: organization
    schemaBaseName: organization
    exampleGetResponse: !include ../examples/organizations/response-array-get.json
    examplePostRequest: !include ../examples/organizations/request-post.json
    examplePostError: !include ../examples/organizations/response-post-error.json
get:
  securedBy: [ test ]
post:
  securedBy: [ test ]
  description: Create a new organization and assign the signed in user.

/{organizationId}:
  is: [ auth ]
  type:
    member:
      humanName: organization
      schemaBaseName: organization
      identifierName: organizationId
      exampleGetResponse: !include ../examples/organizations/response-get.json
      examplePatchRequest: !include ../examples/organizations/request-patch.json
      examplePatchError: !include ../examples/organizations/response-patch-error.json
  get:
    securedBy: [ test ]

  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]

  /users:
    is: [ auth ]
    get:
      securedBy: [ jwt: { type: 'owner' }, test ]
      description: Retrieve all the users for an organization.
      responses:
        200:
          description: List of users or empty list `[]`.
          body:
            schema: user-getAll
            example: !include ../examples/users/response-array-get.json

  /actions:
    is: [ auth ]
    description: Execute different action on the organization.

    post:
      securedBy: [ jwt: { type: 'owner' } ]
      description: Post an action
      body:
        schema: organization-action-post
        example: !include ../examples/organizations/actions/request-post.json

      responses:
        200:
          description: Action successfuly applied.