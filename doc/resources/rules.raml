is: [ auth ]
type:
  collection:
    humanName: rule
    schemaBaseName: rule
    exampleGetResponse: !include ../examples/rules/response-array-get.json
    examplePostRequest: !include ../examples/rules/request-post.json
    examplePostError: !include ../examples/rules/response-post-error.json
get:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    By default, retrieve all the rules that a user can visualize.

    - If an `organizationId` is provided, then all the rules of the organization are
    retrieved. The user must be a member of the organization, otherwise, he will get a `403`.
  queryParameters:
    organizationId:
      description: |
        Filter the rules by organization.

        The user **MUST** be a member of the organization.
      type: integer
      required: true
      example: |
        `organizationId=1`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`
  responses:
    403:
      description: If the user is not a member of the organization.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    Create a new rule.

    The `conditions` and `transformations` can be configured with a `JavaScript` expression which is evaluated in a safe
    way isolated from the server. This means you do not have access to any node module loaded by the server. At the
    moment, you can access to an options which contains the following:

    ```
    {
      json: JSON
    }
    ```

    With this option, you can parse/produce JSON objects.

    ## Conditions

    The `conditions` functions have the following signature:

    ```
    function(event, eventSource, eventType, options) {
      // Evaluation code (your expression comes there)
    }
    ```

    ### Arguments:
    * `event`: The event received by iFLUX
    * `eventSource`: If the event contains the event source, then it is retrieved and pass to the function
    * `eventType`: Same for the event type than the event source.

    ## Transformations

    The `transformations` function have the following signature:

    ```
    function(event, actionTarget, actionType, eventSource, eventType, options) {
      return // Evaluation code (your expression comes there)
    }
    ```

    ### Arguments:
    * `event`: The event received by iFLUX
    * `actionTarget`: Always available.
    * `actionType`: Always available.
    * `eventSource`: If the event contains the event source, then it is retrieved and pass to the function
    * `eventType`: Same for the event type than the event source.

    ## Available data

    ### Event and Action types
    * `generatedIdentifier`: The unique identifier generated by iFLUX Server
    * `name`: The name of the type
    * `description`: Its description
    * `public`: The public state of the type
    * `type`: The user defined type (URL)

    ### Event source and action target templates
    * `generatedIdentifier`: The unique identifier generated by iFLUX Server
    * `name`: The name of the template
  responses:
    403:
      description: If the user is not a member of the organization where the new rule will be defined.

/{id}:
  is: [ auth ]
  type:
    member:
      humanName: rule
      schemaBaseName: rule
      exampleGetResponse: !include ../examples/rules/response-get.json
      examplePatchRequest: !include ../examples/rules/request-patch.json
      examplePatchError: !include ../examples/rules/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the rule.
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
    description: |
      Patch the specific rule.

      Refers to the `POST` documentation of the `/rules` to get more detailed information about the expressions for
      `conditions` and `transformations`.
    responses:
      403:
        description: If the user is not a member of the organization that owns the rule.

  delete:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the rule.