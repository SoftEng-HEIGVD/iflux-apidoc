is: [ auth ]
type:
  collection:
    humanName: action target instance
    schemaBaseName: actionTargetInstance
    exampleGetResponse: !include ../examples/actionTargetInstances/response-array-get.json
    examplePostRequest: !include ../examples/actionTargetInstances/request-post.json
    examplePostError: !include ../examples/actionTargetInstances/response-post-error.json
get:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    You can retrieve the action target instances through:
      * Event source template given through `actionTargetTemplateId`
      * Organization given through `organizationId`
      * All organizations throuhg `allOrganizations`

    At least one of these parementers **MUST** be given. In case, multiple parameters are provided, only one will be
    applied and in this order: `actionTargetTemplateId`, `organizationId` and `allOrganizations`.
  queryParameters:
    actionTargetTemplateId:
      description: |
        Filter the action target instance by action target template.

        The user **MUST** be a member of the organization where the action target instance is configured.
      type: integer
      required: true
      example: |
        `actionTargetTemplateId=1`
    organizationId:
      description: |
        Filter the action target instance by organization.

        The user **MUST** be a member of the organization where the action target instance is configured.
      type: integer
      required: true
      example: |
        `organizationId=1`
    allOrganizations:
      description: Filter the action target instances to retrieve all of them accross all the organizations where the user is member of.
      type: integer
      required: false
      example: |
        `allOrganizations` or `allOrganizations=true`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`
  responses:
    200:
      description: List of event types or empty list `[]`.
    422:
      description: If the `actionTargetTemplateId`, `organizationId` or `allOrganizations` is not provided.
    403:
      description: If the user is not a member of the organization that owns the action target instance.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]
  responses:
    201:
      headers:
        x-iflux-generated-id:
    403:
      description: If the user is not a member of the organization that owns the action target instance.
    422:
      description: |
        Validation errors.

        You will receive these validations errors:

        * `{ "organizationId": [ "No organization found." ] }` when:
          * No organization found from the ID given
          * You have no access to the organization

        * `{ "actionTargetTemplateId": [ "No action target template found." ] }` when:
          * No action target template found from the ID given
          * You have no access to the action target template
          * You cannot create an event action target from an action target template in a different organization. In other words
            the organization ID is not the same as action target template organization ID.
    500:
      description: |
        If a configuration is required, an attempt to configure the remote target is done. Therefore, this error is returned in case
        the remote service is not available or an error is returned by the attempt to configure it.

        **Remark**: At the moment, the action target is saved and there is no way to reconfigure the remote service.
      body:
        example: |
          {
            "message": "Unable to configure the remote action target."
          }

/{id}:
  is: [ auth ]
  type:
    member:
      humanName: action target instances
      schemaBaseName: actionTargetInstance
      exampleGetResponse: !include ../examples/actionTargetInstances/response-get.json
      examplePatchRequest: !include ../examples/actionTargetInstances/request-patch.json
      examplePatchError: !include ../examples/actionTargetInstances/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the action target instance.
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      201:
        headers:
          x-iflux-generated-id:
      403:
        description: If the user is not a member of the organization that owns the action target instance.
      500:
        description: |
          If a configuration is required, an attempt to configure the remote target is done. Therefore, this error is returned in case
          the remote service is not available or an error is returned by the attempt to configure it.

          **Remark**: At the moment, the action target is updated and there is no way to reconfigure the remote service.
        body:
          example: |
            {
              "message": "Unable to configure the remote action target."
            }

  /configure:
    is: [ auth ]
    post:
      securedBy: [ jwt: { type: 'owner' }, test ]
      description: |
        Reconfigure the remote action target
      responses:
        200:
          description: Configured done sucessfully.
        404:
          description: The action target has no configuration.
        500:
          description: Remote action target returned an error during configuration.