is: [ auth ]
type:
  collection:
    humanName: action target instance
    schemaBaseName: actionTargetInstance
    exampleGetResponse: !include ../examples/actionTargetInstances/response-array-get.json
    examplePostRequest: !include ../examples/actionTargetInstances/request-post.json
    examplePostError: !include ../examples/actionTargetInstances/response-post-error.json
get:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    You can retrieve the action target instances through:
      * Event source template given through `actionTargetTemplateId`
      * Organization given through `organizationId`
      * All organizations throuhg `allOrganizations`

    At least one of these parementers **MUST** be given. In case, multiple parameters are provided, only one will be
    applied and in this order: `actionTargetTemplateId`, `organizationId` and `allOrganizations`.
  queryParameters:
    actionTargetTemplateId:
      description: |
        Filter the action target instance by action target template.

        The user **MUST** be a member of the organization where the action target instance is configured.
      type: integer
      required: true
      example: |
        `actionTargetTemplateId=1`
    organizationId:
      description: |
        Filter the action target instance by organization.

        The user **MUST** be a member of the organization where the action target instance is configured.
      type: integer
      required: true
      example: |
        `organizationId=1`
    allOrganizations:
      description: Filter the action target instances to retrieve all of them accross all the organizations where the user is member of.
      type: integer
      required: false
      example: |
        `allOrganizations` or `allOrganizations=true`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`
  responses:
    200:
      description: List of event types or empty list `[]`.
    422:
      description: If the `actionTargetTemplateId`, `organizationId` or `allOrganizations` is not provided.
    403:
      description: If the user is not a member of the organization that owns the action target instance.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]
  responses:
    403:
      description: If the user is not a member of the organization that owns the action target instance.
    422:
      description: |
        Validation errors.

        You will receive these validations errors:

        * `{ "organizationId": [ "No organization found." ] }` when:
          * No organization found from the ID given
          * You have no access to the organization

        * `{ "actionTargetTemplateId": [ "No action target template found." ] }` when:
          * No action target template found from the ID given
          * You have no access to the action target template
          * You cannot create an event action target from an action target template in a different organization. In other words
            the organization ID is not the same as action target template organization ID.

/{actionTargetInstanceId}:
  is: [ auth ]
  type:
    member:
      humanName: action target instances
      schemaBaseName: actionTargetInstance
      identifierName: actionTargetInstanceId
      exampleGetResponse: !include ../examples/actionTargetInstances/response-get.json
      examplePatchRequest: !include ../examples/actionTargetInstances/request-patch.json
      examplePatchError: !include ../examples/actionTargetInstances/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the action target instance.
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the action target instance.
