is: [ auth ]
type:
  collection:
    humanName: event source instance
    schemaBaseName: eventSourceInstance
    exampleGetResponse: !include ../examples/eventSourceInstances/response-array-get.json
    examplePostRequest: !include ../examples/eventSourceInstances/request-post.json
    examplePostError: !include ../examples/eventSourceInstances/response-post-error.json
get:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    You can retrieve the event source instances through:
      * Event source template given through `eventSourceTemplateId`
      * Organization given through `organizationId`
      * All organizations throuhg `allOrganizations`

    At least one of these parementers **MUST** be given. In case, multiple parameters are provided, only one will be
    applied and in this order: `eventSourceTemplateId`, `organizationId` and `allOrganizations`.
  queryParameters:
    eventSourceTemplateId:
      description: |
        Filter the event source instance by event source template.

        The user **MUST** be a member of the organization where the event source instance is configured.
      type: integer
      required: true
      example: |
        `eventSourceTemplateId=1`
    organizationId:
      description: |
        Filter the event source instance by organization.

        The user **MUST** be a member of the organization where the event source instance is configured.
      type: integer
      required: true
      example: |
        `organizationId=1`
    allOrganizations:
      description: Filter the event source instances to retrieve all of them accross all the organizations where the user is member of.
      type: integer
      required: false
      example: |
        `allOrganizations` or `allOrganizations=true`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`
  responses:
    200:
      description: List of event types or empty list `[]`.
    422:
      description: If the `eventSourceTemplateId`, `organizationId` or `allOrganizations` is not provided.
    403:
      description: If the user is not a member of the organization that owns the event source instance.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]
  responses:
    201:
      headers:
        x-iflux-generated-id:
    403:
      description: If the user is not a member of the organization that owns the event source instance.
    422:
      description: |
        Validation errors.

        You will receive these validations errors:

        * `{ "organizationId": [ "No organization found." ] }` when:
          * No organization found from the ID given
          * You have no access to the organization

        * `{ "eventSourceTemplateId": [ "No event source template found." ] }` when:
          * No event source template found from the ID given
          * You have no access to the event source template
          * You cannot create an event source instance from an event source template in a different organization. In other words
            the organization ID is not the same as event source template organization ID.
    500:
      description: |
        If a configuration is required, an attempt to configure the remote source is done. Therefore, this error is returned in case
        the remote service is not available or an error is returned by the attempt to configure it.

        **Remark**: At the moment, the event source is saved and there is no way to reconfigure the remote service.
      body:
        example: |
          {
            "message": "Unable to configure the remote event source."
          }


/{id}:
  is: [ auth ]
  type:
    member:
      humanName: event source instances
      schemaBaseName: eventSourceInstance
      exampleGetResponse: !include ../examples/eventSourceInstances/response-get.json
      examplePatchRequest: !include ../examples/eventSourceInstances/request-patch.json
      examplePatchError: !include ../examples/eventSourceInstances/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the event source instance.
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      201:
        headers:
          x-iflux-generated-id:
      403:
        description: If the user is not a member of the organization that owns the event source instance.
      500:
        description: |
          If a configuration is required, an attempt to configure the remote source is done. Therefore, this error is returned in case
          the remote service is not available or an error is returned by the attempt to configure it.

          **Remark**: At the moment, the event source is updated and there is no way to reconfigure the remote service.
        body:
          example: |
            {
              "message": "Unable to configure the remote event source."
            }