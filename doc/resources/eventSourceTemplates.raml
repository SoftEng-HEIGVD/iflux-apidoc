is: [ auth ]
type:
  collection:
    humanName: event source template
    schemaBaseName: eventSourceTemplate
    exampleGetResponse: !include ../examples/eventSourceTemplates/response-array-get.json
    examplePostRequest: !include ../examples/eventSourceTemplates/request-post.json
    examplePostError: !include ../examples/eventSourceTemplates/response-post-error.json
get:
  securedBy: [ test ]
  description: |
    By default, retrieve all the event source templates that a user can visualize.

    - If an `organizationId` is provided, then all the event source templates of the organization are
    retrieved. The user must be a member of the organization, otherwise, he will get a `403`.

    - If `allOrganizations` is used, therfore, all the event source templates for all the organizations where the user
    is member are retrived.

    - If `public` is provided then all the event source templates that are public are retrieved.

    In the case that multiple parameters are provided, only one will take effect. The evaluation order is the following:
    1. `organizationId`: All event source templates where the user is memober of the specified organization;
    2. `allOrganizations`: All event source templates where the user is member of the linked organizations;
    3. `public`: All public event source templates;
    4. `no param`: All accessible event source templates.
  queryParameters:
    organizationId:
      description: Filter the event source template by organization. The user **MUST** be member of the organization.
      type: integer
      required: false
      example: |
        `organizationId=1`
    allOrganizations:
      description: Filter the event source template to retrieve all of them accross all the organizations where the user is member of.
      type: boolean
      required: false
      example: |
        `allOrganizations` or `allOrganizations=true`
    public:
      description: Filter the action target templates to retrieve all the public ones.
      type: boolean
      required: false
      example: |
        `public` or `public=true`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`

  responses:
    403:
      description: If the user is not a member of the organization that owns the event source template.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]


/{id}:
  is: [ auth ]
  type:
    member:
      humanName: event source template
      schemaBaseName: eventSourceTemplate
      exampleGetResponse: !include ../examples/eventSourceTemplates/response-get.json
      examplePatchRequest: !include ../examples/eventSourceTemplates/request-patch.json
      examplePatchError: !include ../examples/eventSourceTemplates/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
  delete:
    securedBy: [ jwt: { type: 'owner' }, test ]
