is: [ auth ]
type:
  collection:
    humanName: event source
    schemaBaseName: eventSource
    exampleGetResponse: !include ../examples/eventSources/response-array-get.json
    examplePostRequest: !include ../examples/eventSources/request-post.json
    examplePostError: !include ../examples/eventSources/response-post-error.json
get:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    By default, retrieve all the event sources that a user can visualize.

    - If an `eventSourceTemplateId` is provided, then all the event source templates of this event source template are
    retrieved. The user must have the right to access to this event source template, otherwise, he will get a `403`.

    - If an `organizationId` is provided, then all the event sources of the organization are
    retrieved. The user must be a member of the organization, otherwise, he will get a `403`.

    - If `allOrganizations` is used, therfore, all the event sources for all the organizations where the user
    is member are retrived.

    - If `public` is provided then all the event sources that are public are retrieved.

    In the case that multiple parameters are provided, only one will take effect. The evaluation order is the following:
    1. `eventSourceTemplateId`: All event sources that are defined for this event source template;
    2. `organizationId`: All event sources where the user is memober of the specified organization;
    3. `allOrganizations`: All event sources where the user is member of the linked organizations;
    4. `public`: All public event sources;
    5. `no param`: All accessible event sources.
  queryParameters:
    eventSourceTemplateId:
      description: |
        Filter the event sources by event source template.

        The user **MUST** be a member of the organization where the event source is configured.
      type: integer
      required: true
      example: |
        `eventSourceTemplateId=1`
    organizationId:
      description: |
        Filter the event sources by organization.

        The user **MUST** be a member of the organization where the event source is configured.
      type: integer
      required: true
      example: |
        `organizationId=1`
    allOrganizations:
      description: Filter the event sources to retrieve all of them accross all the organizations where the user is member of.
      type: integer
      required: false
      example: |
        `allOrganizations` or `allOrganizations=true`
    public:
      description: Filter the event sources to retrieve all the public ones.
      type: boolean
      required: false
      example: |
        `public` or `public=true`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`
  responses:
    200:
      description: List of event sources or empty list `[]`.
    422:
      description: If the `eventSourceTemplateId`, `organizationId` or `allOrganizations` is not provided.
    403:
      description: If the user is not a member of the organization that owns the event source.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]
  responses:
    201:
      headers:
        x-iflux-generated-id:
    403:
      description: If the user is not a member of the organization that owns the event source.
    422:
      description: |
        Validation errors.

        You will receive these validations errors:

        * `{ "organizationId": [ "No organization found." ] }` when:
          * No organization found from the ID given
          * You have no access to the organization

        * `{ "eventSourceTemplateId": [ "No event source template found." ] }` when:
          * No event source template found from the ID given
          * You have no access to the event source template
          * You cannot create an event source from an event source template in a different organization. In other words
            the organization ID is not the same as event source template organization ID.
    500:
      description: |
        If a configuration is required, an attempt to configure the remote source is done. Therefore, this error is returned in case
        the remote service is not available or an error is returned by the attempt to configure it.
      body:
        example: |
          {
            "message": "Unable to configure the remote event source."
          }

/{id}:
  is: [ auth ]
  type:
    member:
      humanName: event sources
      schemaBaseName: eventSource
      exampleGetResponse: !include ../examples/eventSources/response-get.json
      examplePatchRequest: !include ../examples/eventSources/request-patch.json
      examplePatchError: !include ../examples/eventSources/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the event source.
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      201:
        headers:
          x-iflux-generated-id:
      403:
        description: If the user is not a member of the organization that owns the event source.
      500:
        description: |
          If a configuration is required, an attempt to configure the remote source is done. Therefore, this error is returned in case
          the remote service is not available or an error is returned by the attempt to configure it.

          **Remark**: At the moment, the event source is updated and there is no way to reconfigure the remote service.
        body:
          example: |
            {
              "message": "Unable to configure the remote event source."
            }
  delete:
    securedBy: [ jwt: { type: 'owner' }, test ]

  /configure:
    is: [ auth ]
    post:
      securedBy: [ jwt: { type: 'owner' }, test ]
      description: |
        Reconfigure the remote event source.
      responses:
        200:
          description: Configured done sucessfully.
        404:
          description: The event source has no configuration.
        500:
          description: Remote event source returned an error during configuration.