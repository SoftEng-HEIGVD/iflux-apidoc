is: [ auth ]
type:
  collection:
    humanName: event type
    schemaBaseName: eventType
    exampleGetResponse: !include ../examples/eventTypes/response-array-get.json
    examplePostRequest: !include ../examples/eventTypes/request-post.json
    examplePostError: !include ../examples/eventTypes/response-post-error.json
get:
  securedBy: [ jwt: { type: 'owner' }, test ]
  description: |
    By default, retrieve all the event types that a user can visualize.

    - If an `organizationId` is provided, then all the event types of the organization are
    retrieved. The user must be a member of the organization, otherwise, he will get a `403`.

    - If `allOrganizations` is used, therfore, all the event types for all the organizations where the user
    is member are retrived.

    - If `public` is provided then all the event types that are public are retrieved.

    In the case that multiple parameters are provided, only one will take effect. The evaluation order is the following:
    1. `organizationId`: All event types where the user is memober of the specified organization;
    2. `allOrganizations`: All event types where the user is member of the linked organizations;
    3. `public`: All public event types;
    4. `no param`: All accessible event types.
  queryParameters:
    organizationId:
      description: Filter the event types by organization. The user **MUST** be member of the organization.
      type: integer
      required: false
      example: |
        `organizationId=1`
    allOrganizations:
      description: Filter the event types to retrieve all of them accross all the organizations where the user is member of.
      type: boolean
      required: false
      example: |
        `allOrganizations` or `allOrganizations=true`
    public:
      description: Filter the action target templates to retrieve all the public ones.
      type: boolean
      required: false
      example: |
        `public` or `public=true`
    name:
      type: string
      required: false
      description: Use this parameter to apply a filter on the name. Can be combined with other parameters.
      example: |
        `name=iFlu%`
  responses:
    403:
      description: If the user is not a member of the organization.
post:
  securedBy: [ jwt: { type: 'owner' }, test ]
  responses:
    201:
      headers:
        x-iflux-generated-id:
    403:
      description: If the user is not a member of the organization that owns the event source template.

/{id}:
  is: [ auth ]
  type:
    member:
      humanName: event types
      schemaBaseName: eventType
      exampleGetResponse: !include ../examples/eventTypes/response-get.json
      examplePatchRequest: !include ../examples/eventTypes/request-patch.json
      examplePatchError: !include ../examples/eventTypes/response-patch-error.json
  get:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      403:
        description: If the user is not a member of the organization that owns the event source template.
  patch:
    securedBy: [ jwt: { type: 'owner' }, test ]
    responses:
      201:
        headers:
          x-iflux-generated-id:
      403:
        description: If the user is not a member of the organization that owns the event source template.
  delete:
    securedBy: [ jwt: { type: 'owner' }, test ]
